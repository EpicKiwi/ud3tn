---
stages:
    - builds
    - functional_test
    - code_quality_test
    - publish

image: buildpack-deps:bullseye

variables:
  GIT_SUBMODULE_STRATEGY: recursive

build-posix-debug:
    stage: builds
    when: always
    script:
        - make werror=yes verbose=yes

build-posix-release:
    stage: builds
    when: always
    script:
        - make -j4 type=release optimize=yes werror=yes verbose=yes

build-clang-posix-debug:
    stage: builds
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - make werror=yes verbose=yes TOOLCHAIN=clang

build-clang-posix-release:
    stage: builds
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - make type=release optimize=yes werror=yes verbose=yes TOOLCHAIN=clang

unit-test-posix-debug:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build TOOLCHAIN=clang sanitize-strict=yes unittest-posix
        - cd /ud3tn_build
        - ASAN_OPTIONS=detect_leaks=0 UBSAN_OPTIONS=print_stacktrace=1 timeout 60 build/posix/testud3tn

unit-test-posix-release:
    stage: functional_test
    when: always
    script:
        - timeout 60 make type=release run-unittest-posix

integration-test-posix:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build TOOLCHAIN=clang sanitize-strict=yes
        - cd /ud3tn_build
        - rm -f ./ud3tn.socket
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn --allow-remote-config & UD3TN_PID=$!
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - while ! [ -r ./ud3tn.socket ]; do sleep 0.1; done
        - pytest test/integration
        - kill -TERM $UD3TN_PID
        - echo "Waiting for uD3TN to exit gracefully - if it doesn't, check for sanitizer warnings."
        - wait $UD3TN_PID

integration-test-posix-thread-sanitizer:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build TOOLCHAIN=clang sanitize=thread sanitize-strict=yes
        - cd /ud3tn_build
        - rm -f ./ud3tn.socket
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn --allow-remote-config & UD3TN_PID=$!
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - while ! [ -r ./ud3tn.socket ]; do sleep 0.1; done
        - pytest test/integration
        - kill -TERM $UD3TN_PID
        - echo "Waiting for uD3TN to exit gracefully - if it doesn't, check for sanitizer warnings."
        - wait $UD3TN_PID

integration-test-posix-release:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build type=release optimize=yes
        - cd /ud3tn_build
        - rm -f ./ud3tn.socket
        - build/posix/ud3tn --allow-remote-config &
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - while ! [ -r ./ud3tn.socket ]; do sleep 0.1; done
        - pytest test/integration

aap-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize-strict=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - rm -f ./ud3tn.socket
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn & UD3TN1_PID=$!
        - while ! [ -r ./ud3tn.socket ]; do sleep 0.1; done
        - python tools/aap/aap_test.py
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn -e "dtn://ud3tn2.dtn/" -a '::1' -p 4242 & UD3TN2_PID=$!
        - while ! nc -z localhost 4242; do sleep 0.1; done
        - python tools/aap/aap_test.py --tcp '::1' 4242
        - kill -TERM $UD3TN1_PID
        - kill -TERM $UD3TN2_PID
        - echo "Waiting for uD3TN to exit gracefully - if it doesn't, check for sanitizer warnings."
        - wait $UD3TN1_PID
        - wait $UD3TN2_PID

ion-ipn-bpv6-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ion-interop:3.7.4
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/minimal_forwarding_test/run.sh 6 ipn

ion-ipn-bpv7-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ion-interop:4.1.2
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/minimal_forwarding_test/run.sh 7 ipn

ione-ipn-bpv7-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ione-interop:1.0.1
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/minimal_forwarding_test/run.sh 7 ipn

ion-dtn-bpv6-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ion-interop:3.7.4
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/minimal_forwarding_test/run.sh 6 dtn

ion-dtn-bpv7-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ion-interop:4.1.2
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/minimal_forwarding_test/run.sh 7 dtn

ione-dtn-bpv7-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ione-interop:1.0.1
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/minimal_forwarding_test/run.sh 7 dtn

mtcp-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize-strict=yes
        - cd /ud3tn_build
        - rm -f ./ud3tn.socket
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn --allow-remote-config & UD3TN_PID=$!
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - while ! [ -r ./ud3tn.socket ]; do sleep 0.1; done
        - python tools/cla/mtcp_test.py -t mtcp --payload TESTPAYLOAD &
        - timeout -v 5 python tools/cla/mtcp_sink.py --count 1 --verify-pl TESTPAYLOAD
        - sleep 0.2
        - kill -TERM $UD3TN_PID
        - echo "Waiting for uD3TN to exit gracefully - if it doesn't, check for sanitizer warnings."
        - wait $UD3TN_PID

fragment-reassembly-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize-strict=yes
        - cd /ud3tn_build
        - rm -f ./ud3tn1.socket
        - rm -f ./ud3tn2.socket
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn -c "mtcp:*,4222" -e "dtn://ud3tn1.dtn/" -s ud3tn1.socket & UD3TN1_PID=$!
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn -c "mtcp:*,4223" -e "dtn://ud3tn2.dtn/" -s ud3tn2.socket & UD3TN2_PID=$!
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - while ! nc -z localhost 4222; do sleep 0.1; done
        - while ! nc -z localhost 4223; do sleep 0.1; done
        - while ! [ -r ./ud3tn1.socket ]; do sleep 0.1; done
        - while ! [ -r ./ud3tn2.socket ]; do sleep 0.1; done
        - python tools/aap/aap_config.py --socket ud3tn1.socket --schedule 2 1 140 --schedule 4 1 140 dtn://ud3tn2.dtn/ mtcp:localhost:4223
        - python tools/aap/aap_send.py --socket ud3tn1.socket dtn://ud3tn2.dtn/sink THISISAVERYLONGBUNDLEPAYLOADWHICHWILLBEFRAGMENTED -v
        - timeout -v 5 python tools/aap/aap_receive.py --socket ud3tn2.socket --agentid sink --count 1 --verify-pl THISISAVERYLONGBUNDLEPAYLOADWHICHWILLBEFRAGMENTED --newline -vv
        - kill -TERM $UD3TN1_PID
        - kill -TERM $UD3TN2_PID
        - echo "Waiting for uD3TN to exit gracefully - if it doesn't, check for sanitizer warnings."
        - wait $UD3TN1_PID
        - wait $UD3TN2_PID

ipv6-compatibility-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize-strict=yes
        - cd /ud3tn_build
        # IPv6 and IPv4
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn -c "mtcp:::,4222" -e "dtn://ud3tn1.dtn/" -a '::' -p 4242 & UD3TN1_PID=$!
        # IPv4-only
        - UBSAN_OPTIONS=print_stacktrace=1 build/posix/ud3tn -c "mtcp:::,4223" -e "dtn://ud3tn2.dtn/" -a '127.0.0.1' -p 4243 & UD3TN2_PID=$!
        # Create venv and wait for uD3TN ports to be open
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - while ! nc -z localhost 4222; do sleep 0.1; done
        - while ! nc -z localhost 4223; do sleep 0.1; done
        - while ! nc -z localhost 4242; do sleep 0.1; done
        - while ! nc -z localhost 4243; do sleep 0.1; done
        # Check v6 via AAP to ud3tn1 and via MTCP to ud3tn2
        - python tools/aap/aap_config.py --tcp '::1' 4242 --schedule 2 1 140 --schedule 4 1 140 dtn://ud3tn2.dtn/ 'mtcp:[::1]:4223'
        # Check v4 via AAP to ud3tn1
        - python tools/aap/aap_send.py --tcp 127.0.0.1 4242 dtn://ud3tn2.dtn/sink PAYLOAD -v
        # Check v4 reception of the correct bundle at ud3tn2
        - timeout -v 5 python tools/aap/aap_receive.py --tcp 127.0.0.1 4243 --agentid sink --count 1 --verify-pl PAYLOAD --newline -vv
        # Check that v6 does _not_ work on ud3tn2
        - "if timeout -v 1 python tools/aap/aap_test.py --tcp '::1' 4243; then echo 'Error: Should not be able to connect via IPv6 here.'; false; else true; fi"
        - kill -TERM $UD3TN1_PID
        - kill -TERM $UD3TN2_PID
        - echo "Waiting for uD3TN to exit gracefully - if it doesn't, check for sanitizer warnings."
        - wait $UD3TN1_PID
        - wait $UD3TN2_PID

bibe-internal-forwarding-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize-strict=yes
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/functional/bibe_internal_forwarding_test/run.sh

ion-bibe-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ion-interop:4.1.2
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes "CFLAGS=-DBIBE_CL_DRAFT_1_COMPATIBILITY"
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/bibe_forwarding_test/run.sh

ione-bibe-interoperability-test:
    stage: functional_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ione-interop:1.0.1
    script:
        - bash test/dockerfiles/prepare_for_test.sh . /ud3tn_build sanitize=yes "CFLAGS=-DBIBE_CL_DRAFT_1_COMPATIBILITY"
        - cd /ud3tn_build
        - source /ud3tn_venv/bin/activate
        - bash test/ion_interoperability/bibe_forwarding_test/run.sh

license-check:
    stage: code_quality_test
    when: always
    script:
        - bash tools/analysis/license-check.sh

stylecheck:
    stage: code_quality_test
    when: always
    image: perl:5
    script:
        - make check-style

python-stylecheck:
    stage: code_quality_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - source /ud3tn_venv/bin/activate
        - pip install -e "pyd3tn"
        - pip install -e "python-ud3tn-utils"
        - pip install -e "python-ud3tn-utils"
        - python -m flake8 pyd3tn python-ud3tn-utils test/integration tools/aap tools/cla --max-complexity=12

clang-tidy-posix-debug:
    stage: code_quality_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - make ccmds-posix -j4
        - bash ./tools/analysis/clang-check.sh "clang-tidy-13 --use-color" "posix" "components/agents/posix" "components/cla/posix" "components/platform/posix"

clang-tidy-posix-release:
    stage: code_quality_test
    when: always
    image: registry.gitlab.com/d3tn/ud3tn-docker-images/ci-python-clang:3.10-bullseye
    script:
        - make ccmds-posix -j4 type=release
        - bash ./tools/analysis/clang-check.sh "clang-tidy-13 --use-color" "posix" "components/agents/posix" "components/cla/posix" "components/platform/posix"

publish-docker-image:
    stage: publish
    rules:
        - if: '$CI_COMMIT_TAG =~ /^v[0-9]+(.[0-9]+)+$/'
          when: always
    image:
        # See https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
        name: gcr.io/kaniko-project/executor:debug
        entrypoint: [""]
    variables:
        CI_REGISTRY_IMAGE: registry.gitlab.com/d3tn/ud3tn-docker-images/ud3tn
    script:
        # find out if the docker image *also* should be tagged with "latest"
        - |
          # Download all existing ud3tn docker image tags from the docker image registry
          wget -q "https://gitlab.com/api/v4/projects/23559871/registry/repositories/1616836/tags" -O tags.json

          # Remove some json symbols, introduce line feeds for better filtering
          sed -i -E 's/\]//g; s/\[//g; s/\},?/\n/g' tags.json

          # Remove everything except the docker image tags (latest, v0.9.0, ...)
          sed -i -E 's/(^.*"name":")(.*)(","path.*$)/\2/' tags.json

          # Append the $CI_COMMIT_TAG to the list of tags
          echo "$CI_COMMIT_TAG" >> tags.json

          # Get the numerically highest *version* tag
          highest_version=$(grep -E "v.*" tags.json | sort -rV | head -n1)

          # Build the string $IMAGES that determines what image_name:image_tag the resulting docker image will have
          TAGS="$CI_COMMIT_TAG"
          if [ "$highest_version" = "$CI_COMMIT_TAG" ]; then TAGS="$TAGS latest"; fi
          for TAG in $TAGS; do
            IMAGES="${IMAGES} --destination $CI_REGISTRY_IMAGE:$TAG";
          done;
        - echo $IMAGES
        # Prepare docker image registry access credentials
        - mkdir -p /kaniko/.docker
        - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$UD3TN_CI_DOCKER_DEPLOY_USER\",\"password\":\"$UD3TN_CI_DOCKER_DEPLOY_PASSWORD\"}}}" > /kaniko/.docker/config.json
        # Build and push the docker image
        - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/dockerfiles/ud3tn --build-arg UD3TN_VERSION=$CI_COMMIT_TAG $IMAGES

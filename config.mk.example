# Example for build-time configuration options.
# Copy this to `config.mk` and adjust as needed. The values shown below are
# usage examples, whereas the first one is always the default value.

##################
# Build settings #
##################

# Note: The following settings are expected to be provided mainly on the `make`
# command line. If needed, however, they can be specified here.

# If set to `release`, build without debug symbols and optimize the binary.
#type ?= debug
#type ?= release

# If set to `yes`, enable further warnings. If set to `all`, enable even more
# warnings, including those that could be false positive.
#wextra ?= yes
#wextra ?= no
#wextra ?= all

# If set to `yes`, make warnings terminate the build process.
#werror ?= no
#werror ?= yes

# If set to `yes`, print all commands issued during build.
#verbose ?= no
#verbose ?= yes

# Enable sanitizers. As some of them are incompatible, there are multiple
# options: `yes` means to use the address and UB sanitizers, `memory` (only
# available with Clang) the memory sanitizer, and `thread` (only available with
# Clang) the thread sanitizer.
#sanitize ?= no
#sanitize ?= yes
#sanitize ?= memory
#sanitize ?= thread

# If set to `yes`, terminate the program on sanitizer errors.
#sanitize-strict ?= no
#sanitize-strict ?= yes

# If set to `yes`, build a binary instrumented for coverage analysis.
#coverage ?= no
#coverage ?= yes

#####################
# Toolchain options #
#####################

# Toolchain to be used. `gcc` or `clang` can be selected. Note that this can
# also be specified on the command line, e.g.: `make TOOLCHAIN=clang`
#TOOLCHAIN := gcc

# Toolchain prefix, useful for cross-compilation.
# can be left empy most of the time (default: search in $PATH)
#TOOLCHAIN_POSIX :=
#TOOLCHAIN_POSIX := arm-linux-gnueabihf-

# Prefix for the Clang compiler
#CLANG_PREFIX :=
#CLANG_PREFIX := /opt/my-clang-installation/

# --sysroot provided to the Clang compiler, useful for providing the path to
# the embedded toolchain so the proper headers are found.
# If left empty, the option is not provided to the compiler.
#CLANG_SYSROOT_POSIX :=

# Value passed to the compiler via `-march`. If not specified, will use
# `-march=native` on x86/x86_64 platforms and not pass the parameter on others.
#ARCH :=
#ARCH := armv7-m

# Use flags suitable for the macOS linker. If not specified, autodetect.
#EXPECT_MACOS_LINKER := 0

# Additional compiler flags.
#CPPFLAGS +=

# Additional linker flags.
#LDFLAGS +=

# Additional flags passed to compiler and linker.
#ARCH_FLAGS +=
